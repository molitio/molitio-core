{"version":3,"sources":["component/MFormComponent.tsx","service/formService.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["MFormComponent","formCollection","firstName","useState","lastName","Array","from","formsData","values","map","form","className","componentBodyClassNames","style","componentBodyStyle","formContainerClassNames","formContainerStyle","formClassNames","formStyle","formFields","field","inputContainerClassNames","inputClassNames","id","type","inputLabelClassNames","htmlFor","labelText","formService","Map","tag","displayName","padding","backgroundColor","color","value","minMaxLimit","min","max","required","App","placeholder","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6646f9bb.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport { MFormProps } from \"./interface/MFormProps\";\nimport \"../index.scss\";\nimport \"./component.scss\";\n\nexport function MFormComponent({ formCollection }: MFormProps): JSX.Element {\n  const firstName = useState(\"\");\n  const lastName = useState(\"\");\n\n  return (\n    <>\n      {Array.from(formCollection.formsData.values()).map((form) => (\n        <div className={form.componentBodyClassNames} style={form.componentBodyStyle}>\n          <div className={form.formContainerClassNames} style={form.formContainerStyle}>\n            <form className={form.formClassNames} style={form.formStyle}>\n              {Array.from(form.formFields).map((field) => (\n                <div className={field[1].inputContainerClassNames}>\n                  <input\n                    className={field[1].inputClassNames}\n                    id={field[0]}\n                    type={field[1].type}\n                  />\n                  <label\n                    className={field[1].inputLabelClassNames}\n                    htmlFor={field[0]}\n                  >\n                    {field[1].labelText}\n                  </label>\n                </div>\n              ))}\n              <div className=\"form-check\">\n                <input\n                  type=\"checkbox\"\n                  className=\"form-check-input\"\n                  id=\"exampleCheck1\"\n                />\n                <label className=\"form-check-label\" htmlFor=\"exampleCheck1\">\n                  Check me out\n                </label>\n              </div>\n            </form>\n          </div>\n        </div>\n      ))}\n\n      <h5>\n        {firstName}\n        {lastName}\n      </h5>\n    </>\n  );\n}\n","import { FormCollection } from \"../component/interface/FormCollection\";\nimport { FormField } from \"../component/interface/FormField\";\nimport { MForm } from \"../component/interface/MForm\";\n\nexport const formService: FormCollection = {\n  formsData: new Map<string, MForm>([\n    [\n      \"personalInfo\",\n      {\n        tag: \"firstLastNameForm\",\n        displayName: \"Personal Information\",\n        id: \"cda8752d-0ba7-4852-b9e7-cb03b919277c\",\n\n        componentBodyClassNames: \"\",\n        componentBodyStyle: {\n          padding: \"20px\",\n          backgroundColor: \"purple\",\n        },\n\n        formContainerClassNames: \"container\",\n        formContainerStyle: {\n          color: \"yellow\",\n        },\n\n        formClassNames: \"\",\n        formStyle: {},\n\n        formFields: new Map<string, FormField>([\n          [\n            \"firstName\",\n            {\n              type: \"text\",\n              labelText: \"First name\",\n              inputContainerClassNames: \"form-group\",\n              inputClassNames: \"form-control\",\n              inputLabelClassNames: \"\",\n              value: \"\",\n              minMaxLimit: { min: 3, max: 144 },\n              required: true,\n            },\n          ],\n          [\n            \"lastName\",\n            {\n              type: \"text\",\n              labelText: \"Last name\",\n              inputContainerClassNames: \"form-group\",\n              inputClassNames: \"form-control\",\n              inputLabelClassNames: \"\",\n              value: \"\",\n              minMaxLimit: { min: 3, max: 144 },\n              required: true,\n            },\n          ],\n          [\n            \"dob\",\n            {\n              type: \"date\",\n              labelText: \"Date of Birth\",\n              inputContainerClassNames: \"form-group\",\n              inputClassNames: \"form-control\",\n              inputLabelClassNames: \"\",\n              value: \"\",\n              minMaxLimit: { min: 1900, max: 2021 },\n              required: true,\n            },\n          ],\n          [\n            \"accept\",\n            {\n              type: \"checkbox\",\n              labelText: \"Accept answer\",\n              inputContainerClassNames: \"form-check\",\n              inputClassNames: \"form-check-input my-1\",\n              inputLabelClassNames: \"form-check-label\",\n              value: false,\n              minMaxLimit: { min: 1900, max: 2021 },\n              required: true,\n            },\n          ],\n        ]),\n      },\n    ],\n  ]),\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport { MFormComponent } from \"./component/MFormComponent\";\nimport { formService } from \"./service/formService\";\n\nfunction App() {\n  return (\n    <>\n      <div className=\"App\">\n        <MFormComponent formCollection={formService} />\n      </div>\n\n      <div>\n        <form>\n          <div className=\"form-row align-items-center\">\n            <div className=\"col-sm-3 my-1\">\n              <label className=\"sr-only\" htmlFor=\"inlineFormInputName\">\n                Name\n              </label>\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                id=\"inlineFormInputName\"\n                placeholder=\"Jane Doe\"\n              />\n            </div>\n            <div className=\"col-sm-3 my-1\">\n              <label className=\"sr-only\" htmlFor=\"inlineFormInputGroupUsername\">\n                Username\n              </label>\n              <div className=\"input-group\">\n                <div className=\"input-group-prepend\">\n                  <div className=\"input-group-text\">@</div>\n                </div>\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  id=\"inlineFormInputGroupUsername\"\n                  placeholder=\"Username\"\n                />\n              </div>\n            </div>\n            <div className=\"col-auto my-1\">\n              <div className=\"form-check\">\n                <input\n                  className=\"form-check-input\"\n                  type=\"checkbox\"\n                  id=\"autoSizingCheck2\"\n                />\n                <label className=\"form-check-label\" htmlFor=\"autoSizingCheck2\">\n                  Remember me\n                </label>\n              </div>\n            </div>\n            <div className=\"col-auto my-1\">\n              <button type=\"submit\" className=\"btn btn-primary\">\n                Submit\n              </button>\n            </div>\n          </div>\n        </form>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}